@model ICollection<Minerva.Models.Web.Storage.GridItem>

@using GridMvc.Html;
@using GridMvc.Sorting;
@using Minerva.Models.Web.Storage;
@using Minerva.Models.Web.Share;
@using res = Minerva.Resources;
@using ItemType = Minerva.Models.Web.Storage.ItemType;

@{
    ViewBag.Title = res.Layout.YourStorage;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var editing = ViewBag.Editing != null && ViewBag.Editing;
    var routeData = HttpContext.Current.Request.RequestContext.RouteData;
    var action = routeData.Values["action"].ToString();
    int? currentId = ViewBag.CurrentId;
    int? parentId = ViewBag.ParentId;
    var parents = (ICollection<BreadcrumbItem>)ViewBag.Parents;
}

<h2>@ViewBag.Title</h2>

@Html.Partial("_ParentBreadcrumbs", parents)

@if (editing)
{
    <div id="alerts"></div>
    
    <ul class="nav nav-pills">
        <li class="dropdown">
            <a data-toggle="dropdown" href="#" title="@res.Layout.AddDropDownTitle">@res.Layout.Add<b class="caret"></b></a>
            <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                <li><a href="#" title="@res.Layout.AddFileTitle" onclick="modalShow('#add-file-modal')">@res.Layout.File</a></li>
                <li><a href="#" title="@res.Layout.AddDirectoryTitle" onclick="modalShow('#add-dir-modal')">@res.Layout.Directory</a></li>
            </ul>
        </li>
        @if(parentId.HasValue) {
            <li>@Html.ActionLink(@res.Layout.Up, action, new { Id = parentId })</li>
        }
        <li><a class="can-disable-items" href="#" title="@res.Layout.DeleteTitle" onclick="deleteItems()">@res.Layout.Delete</a></li>
        <li><a class="can-disable-items" href="#" title="@res.Layout.ShareTitle" onclick="shareItemsShow()">@res.Layout.Share</a></li>
    </ul>
}

@Html.Hidden("CurrentId", currentId)

@Html.Grid(Model).Columns(columns =>
    {
        if (editing)
        {
            columns.Add()
                .Encoded(false)
                .Sanitized(false)
                .SetWidth(30)
                .RenderValueAs(item => Html.CheckBox("checked", false, new { id = item.Id, onclick = "checkedItem()" }));
        }
        columns.Add(item => item.Name)
            .RenderValueAs(item =>
                item.Type == ItemType.File
                    ? string.Format("<a href=\"#\" onclick=\"showItem({0}, '{1}')\">{2}</a>", item.Id, item.Type, item.Name)
                    : Html.ActionLink(item.Name, action, new { id = item.Id}).ToString())
            .Encoded(false)
            .Sanitized(false)
            .Titled(res.Model.Name)
            .SortInitialDirection(GridSortDirection.Descending)
            .Sortable(true);
        columns.Add(item => item.LastModification)
            .Titled(res.Model.LastModification)
            .Sortable(true)
            .Format("{0:dd/MM/yyyy}");
    }
).WithPaging(20)

<!--Html.Partial("_Comments")-->

@if (editing)
{
    <div id="add-file-modal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">@res.Layout.AddFile</h4>
                </div>
                <div class="modal-body">
                    <div id="add-file-alerts"></div>
                    <form id="file-uploader" role="form">
                        <fieldset>
                            @Html.Label(@res.Model.File)
                            <div class="fileinput fileinput-new input-group" data-provides="fileinput">
                                <div class="form-control" data-trigger="fileinput"><i class="glyphicon glyphicon-file fileinput-exists"></i> <span class="fileinput-filename"></span></div>
                                <span class="input-group-addon btn btn-default btn-file">
                                    <span class="fileinput-new">@res.Layout.SelectFile</span>
                                    <span class="fileinput-exists">@res.Layout.Change</span>
                                    <input type="file" name="...">
                                </span>
                                <a href="#" class="input-group-addon btn btn-default fileinput-exists" data-dismiss="fileinput">@res.Layout.Remove</a>
                            </div>
                            <div class="form-group">
                                @Html.Label(@res.Model.Description)
                                <input id="description" type="text" class="form-control" placeholder="@res.Layout.Optional" />
                            </div>
                        </fieldset>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">@res.Layout.Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="upload()">@res.Layout.Add</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->
    var model = new Minerva.Models.Api.Directory.Add();
    <div id="add-dir-modal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">@res.Layout.AddDirectory</h4>
                </div>
                <div class="modal-body">
                    <form role="form">
                        @Html.ValidationSummary()
                        @Html.Partial("_AddDirectoryPartial", model)
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">@res.Layout.Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="dirSave()">@res.Layout.Add</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->
    <div id="share-modal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">@res.Layout.Sharing</h4>
                </div>
                <div class="modal-body">
                    <div id="share-alerts"></div>
                    @using (Ajax.BeginForm("Share", "DiskItem", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "result" }))
                    {
                        @Html.ValidationSummary()
                        @Html.Partial("_Share", new ShareModel())
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">@res.Layout.Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="shareItems()">@res.Layout.Share</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->

    <script type="text/javascript">

    $(function () {
        $('#add-file-modal').on('hidden.bs.modal', function (e) {
            $('#add-file-modal input').val('');
        })

        $('#add-dir-modal').on('hidden.bs.modal', function (e) {
            $('#add-dir-modal input').val('');
            $('#add-dir-modal textarea').val('');
            $('.validation-summary-errors li').empty();
            $('.validation-summary-errors li').hide();
            $('#add-dir-modal input').removeClass("input-validation-error");
            $('#add-dir-modal form').validate().resetForm();
        })

        $('#share-modal').on('hidden.bs.modal', function (e) {
            $('#share-modal input').val('');
        })

        $('div.grid-mvc thead tr').first().find('.grid-header-title span').first().append('<input type="checkbox" class="all-items" onclick="allItems()"/>');
    });

    function dirSave() {
        var form = $('#add-dir-modal form');
        var validator = form.validate();

        if (form.valid()) {
            var name = $('#add-dir-modal input#Name').val();
            var description = $('#add-dir-modal textarea#Description').val();
            var currentId = $('input:hidden#CurrentId').val();
            $('#add-dir-modal').modal('hide')

            var sendData = {
                name: name,
                ParentId: currentId,
                description: description
            };

            $.ajax({
                url: '@Url.Action("AddDirectory", "DiskItem")',
                method: 'POST',
                data: JSON.stringify(sendData),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                cache: false,
                success: function (data) {
                    showAlert('@res.Messages.DirectoryAdded', 'success');
                    location.reload(true);
                },
                error: function (data) {
                    showAlert('@res.Messages.DirectoryNotAdded', 'danger');
                }
            });
        }
    }

    function shareItemsShow() {
        if (selectedCount() == 0) {
            showAlert('@res.Messages.NoSelectedItemsToShareWarning', 'warning');
            return;
        }

        modalShow('#share-modal');
    }

    function shareItems() {
        if (selectedCount() == 0) {
            showAlert('@res.Messages.NoSelectedItemsToShareWarning', 'warning');
            return;
        }

        var names = $('#share-modal input#Usernames').val();
        console.log(names);

        var model = {
            Usernames: names,
            DiskItemIds: selectedItems()
        }

        $.ajax({
            url: '@Url.Action("Share", "DiskItem")',
            method: 'POST',
            data: JSON.stringify(model),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            cache: false,
            success: function (data) {
                if (data != true) {
                    var txt = '';
                    for (var i = 0; i < data.Usernames.length; i++) {
                        txt += data.Usernames[i] + '<br/>';
                    }
                    console.log(txt);
                    showAlert(txt, 'warning', '#share-modal #share-alerts');
                    retur;
                }

                showAlert('@res.Messages.ShareSuccess', 'success');
                location.reload(true);
            },
            error: function (data) {
                showAlert('@res.Messages.ShareFailed', 'danger');
                $('share-modal').hide();
            }
        });
    }

    function deleteItems() {
        if (confirm('@res.Messages.DeleteConfirm')) {
            if (selectedCount() == 0) {
                showAlert('@res.Messages.NotSelectedItemsToDeleteWarning', 'warning');
                return;
            }

            $.ajax({
                url: '@Url.Action("Delete", "DiskItem")',
                method: 'POST',
                data: JSON.stringify(selectedItems()),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                cache: false,
                success: function (data) {
                    showAlert('@res.Messages.ItemsDeleted', 'success');
                    location.reload(true);
                },
                error: function (data) {
                    showAlert('@res.Messages.ItemsNotDeleted', 'danger');
                }
            });
        }
    }

    function allItems() {
        console.log('all items checked');
        var a = $('div.grid-mvc .all-items').prop('checked');
        $('div.grid-mvc tbody input:checkbox').prop('checked', a);
    }

    function checkedItem() {
        var allItemsCount = $('div.grid-mvc tbody input:checkbox').length;

        $('div.grid-mvc .all-items').prop('checked', allItemsCount == selectedCount());
    }

    function upload() {
        var description = $('#add-file-modal input#description').val();

        var filename = $('#add-file-modal input:file').val();

        if (filename.length > 0) {
            @* Dodanie pliku    *@
            var currentId = $('input:hidden#CurrentId').val();
            var fileId = -1;

            var sendData = {
                name: filename,
                ParentId: currentId,
                description: description
            };
            
            $.ajax({
                url: '@Url.Action("AddFile", "DiskItem")',
                method: 'POST',
                data: JSON.stringify(sendData),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                cache: false,
                success: function (data) {
                    fileId = data;
                },
                error: function (data) {
                    
                }
            });

            @* Upload pliku     *@
            if (fileId > 0) {
                var formData = new FormData();
                formData.append('files[]', $('#add-file-modal input:file').get(0).files[0]);
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Upload", "File", new { id = 1 })',
                    enctype: 'multipart/form-data',
                    data: formData,
                    success: function () {
                        alert("Data Uploaded: ");

                        showAlert('@res.Messages.FileAdded', 'success');
                        location.reload(true);
                    }
                });
            }

            @*  Gdy niepowodzenie *@
            showAlert('@res.Messages.FileNotAdded', 'danger');
            $('#add-file-modal').hide();
        }
        else {
            showAlert('@string.Format(res.Validation.Required, res.Model.File)', 'warning', '#add-file-modal #add-file-alerts');
        }
    }

    function selectedCount() {
        return $('div.grid-mvc tbody input:checked').length;
    }

    function selectedItems() {
        var ids = [];
        $('div.grid-mvc tbody input:checked').each(function () { ids.push(this.id); });;

        return ids;
    }
    </script>
}

<div id="item-modal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div class="info-general">
                    <p>Utworzone przez: </p>
                    <p>Data utworzenia: </p>
                    <p>Modyfikowane przez: </p>
                    <p>Data modyfikacji: </p>
                </div>
                <hr />
                <div class="comments">
                    <h4>Komentarze</h4>


                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">@res.Layout.Hide</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>

<script type="text/javascript">

    function showItem(id, type) {
        //todo pobranie info o elemencie

        $('#item-modal .modal-title').val('[nazwa elementu]');

        modalShow('#item-modal');
    }

    function modalShow(param) {
        $(param).modal('show');
    }

    function showAlert(message, type, destination) {
        destination = destination || '#alerts';
        if (type != 'warning' && type != 'info' && type == 'success' && type != 'danger') {
            type = 'info';
        }

        var msg = '<div class="alert alert-' + type + ' alert-dismissable">';
        msg += '<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>';
        msg += message + "</div>";

        $(destination).slideUp(function () {
            $(destination).children().remove();
            $(destination).append(msg);
            $(destination).slideDown();
        });
    }

</script>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
}