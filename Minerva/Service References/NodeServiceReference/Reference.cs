//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Minerva.NodeServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemInfo", Namespace="http://schemas.datacontract.org/2004/07/Minerva.Services.Contracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Minerva.NodeServiceReference.Item))]
    public partial class ItemInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Minerva.NodeServiceReference.ItemType ItemTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Minerva.NodeServiceReference.ItemType ItemType {
            get {
                return this.ItemTypeField;
            }
            set {
                if ((this.ItemTypeField.Equals(value) != true)) {
                    this.ItemTypeField = value;
                    this.RaisePropertyChanged("ItemType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Item", Namespace="http://schemas.datacontract.org/2004/07/Minerva.Services.Contracts")]
    [System.SerializableAttribute()]
    public partial class Item : Minerva.NodeServiceReference.ItemInfo {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemType", Namespace="http://schemas.datacontract.org/2004/07/Minerva.Services.Contracts")]
    public enum ItemType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Folder = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        File = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemProperties", Namespace="http://schemas.datacontract.org/2004/07/Minerva.Services.Contracts")]
    [System.SerializableAttribute()]
    public partial class ItemProperties : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NodeServiceReference.INodeService")]
    public interface INodeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/GetChildrenInfo", ReplyAction="http://tempuri.org/INodeService/GetChildrenInfoResponse")]
        Minerva.NodeServiceReference.ItemInfo[] GetChildrenInfo(System.Nullable<int> parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/GetChildrenInfo", ReplyAction="http://tempuri.org/INodeService/GetChildrenInfoResponse")]
        System.Threading.Tasks.Task<Minerva.NodeServiceReference.ItemInfo[]> GetChildrenInfoAsync(System.Nullable<int> parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/GetChildren", ReplyAction="http://tempuri.org/INodeService/GetChildrenResponse")]
        Minerva.NodeServiceReference.Item[] GetChildren(System.Nullable<int> parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/GetChildren", ReplyAction="http://tempuri.org/INodeService/GetChildrenResponse")]
        System.Threading.Tasks.Task<Minerva.NodeServiceReference.Item[]> GetChildrenAsync(System.Nullable<int> parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/RemoveItem", ReplyAction="http://tempuri.org/INodeService/RemoveItemResponse")]
        void RemoveItem(int itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/RemoveItem", ReplyAction="http://tempuri.org/INodeService/RemoveItemResponse")]
        System.Threading.Tasks.Task RemoveItemAsync(int itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/AddItem", ReplyAction="http://tempuri.org/INodeService/AddItemResponse")]
        void AddItem(int parentId, Minerva.NodeServiceReference.Item item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/AddItem", ReplyAction="http://tempuri.org/INodeService/AddItemResponse")]
        System.Threading.Tasks.Task AddItemAsync(int parentId, Minerva.NodeServiceReference.Item item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/ChangeItem", ReplyAction="http://tempuri.org/INodeService/ChangeItemResponse")]
        void ChangeItem(Minerva.NodeServiceReference.Item item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/ChangeItem", ReplyAction="http://tempuri.org/INodeService/ChangeItemResponse")]
        System.Threading.Tasks.Task ChangeItemAsync(Minerva.NodeServiceReference.Item item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/GetProperties", ReplyAction="http://tempuri.org/INodeService/GetPropertiesResponse")]
        Minerva.NodeServiceReference.ItemProperties[] GetProperties(int itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeService/GetProperties", ReplyAction="http://tempuri.org/INodeService/GetPropertiesResponse")]
        System.Threading.Tasks.Task<Minerva.NodeServiceReference.ItemProperties[]> GetPropertiesAsync(int itemId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INodeServiceChannel : Minerva.NodeServiceReference.INodeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NodeServiceClient : System.ServiceModel.ClientBase<Minerva.NodeServiceReference.INodeService>, Minerva.NodeServiceReference.INodeService {
        
        public NodeServiceClient() {
        }
        
        public NodeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NodeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NodeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NodeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Minerva.NodeServiceReference.ItemInfo[] GetChildrenInfo(System.Nullable<int> parentId) {
            return base.Channel.GetChildrenInfo(parentId);
        }
        
        public System.Threading.Tasks.Task<Minerva.NodeServiceReference.ItemInfo[]> GetChildrenInfoAsync(System.Nullable<int> parentId) {
            return base.Channel.GetChildrenInfoAsync(parentId);
        }
        
        public Minerva.NodeServiceReference.Item[] GetChildren(System.Nullable<int> parentId) {
            return base.Channel.GetChildren(parentId);
        }
        
        public System.Threading.Tasks.Task<Minerva.NodeServiceReference.Item[]> GetChildrenAsync(System.Nullable<int> parentId) {
            return base.Channel.GetChildrenAsync(parentId);
        }
        
        public void RemoveItem(int itemId) {
            base.Channel.RemoveItem(itemId);
        }
        
        public System.Threading.Tasks.Task RemoveItemAsync(int itemId) {
            return base.Channel.RemoveItemAsync(itemId);
        }
        
        public void AddItem(int parentId, Minerva.NodeServiceReference.Item item) {
            base.Channel.AddItem(parentId, item);
        }
        
        public System.Threading.Tasks.Task AddItemAsync(int parentId, Minerva.NodeServiceReference.Item item) {
            return base.Channel.AddItemAsync(parentId, item);
        }
        
        public void ChangeItem(Minerva.NodeServiceReference.Item item) {
            base.Channel.ChangeItem(item);
        }
        
        public System.Threading.Tasks.Task ChangeItemAsync(Minerva.NodeServiceReference.Item item) {
            return base.Channel.ChangeItemAsync(item);
        }
        
        public Minerva.NodeServiceReference.ItemProperties[] GetProperties(int itemId) {
            return base.Channel.GetProperties(itemId);
        }
        
        public System.Threading.Tasks.Task<Minerva.NodeServiceReference.ItemProperties[]> GetPropertiesAsync(int itemId) {
            return base.Channel.GetPropertiesAsync(itemId);
        }
    }
}
